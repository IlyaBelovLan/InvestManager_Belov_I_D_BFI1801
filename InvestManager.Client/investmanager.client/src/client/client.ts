/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {apiBase} from "./apiBase";

export class Client extends apiBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCurrentPrice(body: GetCurrentPriceQuery | undefined): Promise<GetCurrentPriceResponse> {
        let url_ = this.baseUrl + "/FinancialData/GetCurrentPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetCurrentPrice(_response);
        });
    }

    protected processGetCurrentPrice(response: Response): Promise<GetCurrentPriceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GetCurrentPriceResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCurrentPriceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchSymbols(body: SearchSymbolsQuery | undefined): Promise<SearchSymbolsResponse> {
        let url_ = this.baseUrl + "/FinancialData/SearchSymbols";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processSearchSymbols(_response);
        });
    }

    protected processSearchSymbols(response: Response): Promise<SearchSymbolsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <SearchSymbolsResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchSymbolsResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getPriceChart(body: GetPriceChartQuery | undefined): Promise<GetPriceChartResponse> {
        let url_ = this.baseUrl + "/FinancialData/GetPriceChart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPriceChart(_response);
        });
    }

    protected processGetPriceChart(response: Response): Promise<GetPriceChartResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GetPriceChartResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetPriceChartResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getStocksList(body: GetStocksListQuery | undefined): Promise<GetStocksListResponse> {
        let url_ = this.baseUrl + "/FinancialData/GetStocksList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetStocksList(_response);
        });
    }

    protected processGetStocksList(response: Response): Promise<GetStocksListResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GetStocksListResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetStocksListResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createNote(body: CreateNoteCommand | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Notes/CreateNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreateNote(_response);
        });
    }

    protected processCreateNote(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getNotes(body: GetNotesQuery | undefined): Promise<GetNotesResponse> {
        let url_ = this.baseUrl + "/Notes/GetNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetNotes(_response);
        });
    }

    protected processGetNotes(response: Response): Promise<GetNotesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GetNotesResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetNotesResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerUser(body: RegisterUserCommand | undefined): Promise<RegisterUserResponse> {
        let url_ = this.baseUrl + "/Users/RegisterUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: Response): Promise<RegisterUserResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <RegisterUserResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegisterUserResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    logIn(body: LogInQuery | undefined): Promise<LogInResponse> {
        let url_ = this.baseUrl + "/Users/LogIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processLogIn(_response);
        });
    }

    protected processLogIn(response: Response): Promise<LogInResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <LogInResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogInResponse>(<any>null);
    }
}

export interface GetCurrentPriceQuery {
    symbol?: string | null;
    exchange?: string | null;
}

export interface GetCurrentPriceResponse {
    price?: string | null;
}

export interface SearchSymbolsQuery {
    symbol?: string | null;
    outputSize?: number;
}

export interface SearchSymbolsResponseItem {
    symbol?: string | null;
    instrumentName?: string | null;
    exchange?: string | null;
    exchangeTimezone?: string | null;
    instrumentType?: string | null;
    country?: string | null;
    currency?: string | null;
}

export interface SearchSymbolsResponse {
    data?: SearchSymbolsResponseItem[] | null;
    symbolsCount?: number;
}

export enum DatePeriod {
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year",
    FiveYears = "fiveYears",
    All = "all",
}

export interface GetPriceChartQuery {
    symbol?: string | null;
    exchange?: string | null;
    datePeriod?: DatePeriod;
}

export interface PriceChartItem {
    datetime?: string | null;
    open?: string | null;
    high?: string | null;
    low?: string | null;
    close?: string | null;
    volume?: string | null;
}

export interface GetPriceChartResponse {
    currency?: string | null;
    exchangeTimezone?: string | null;
    instrumentType?: string | null;
    chartItems?: PriceChartItem[] | null;
    itemsCount?: number;
}

export interface GetStocksListQuery {
    exchange?: string | null;
}

export interface StockInfo {
    symbol?: string | null;
    name?: string | null;
    currency?: string | null;
    exchange?: string | null;
    country?: string | null;
    type?: string | null;
}

export interface GetStocksListResponse {
    stocksInfos?: StockInfo[] | null;
}

export interface CreateNoteCommand {
    symbol?: string | null;
    text?: string | null;
}

export interface GetNotesQuery {
    symbol?: string | null;
}

export interface Note {
    id?: string | null;
    symbol?: string | null;
    text?: string | null;
    createDate?: string | null;
}

export interface GetNotesResponse {
    notes?: Note[] | null;
    count?: number;
}

export interface RegisterUserCommand {
    userName?: string | null;
    email?: string | null;
    passwordHash?: string | null;
}

export interface RegisterUserResponse {
    accessToken?: string | null;
}

export interface LogInQuery {
    email?: string | null;
    passwordHash?: string | null;
}

export interface LogInResponse {
    accessToken?: string | null;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}